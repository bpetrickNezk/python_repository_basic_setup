# from https://docs.astral.sh/ruff/configuration/
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".devcontainer",
]

line-length = 125
indent-width = 4

# Assume Python 3.13
target-version = "py313"


[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# https://docs.astral.sh/ruff/rules/
select = [
    "ANN", # flake8-annotations
    "B", # flake8-bugbear, mainly for: mutable-argument-default (B006)
    "D", # pydocstyle    doc
    "E", # pycodestyle   code
    "F", # Pyflakes
    "FLY", # flynt static-join-to-f-string
    "I", # Isort
    "W", # pycodestyle warnings
    "N", # pep8-naming
    "YTT", # flake8-2020 TODO -> select all flake8 settings
    "S", # flake8-bandit
    "TC", # flake8-type-checking
    "T20", # print() found -> use logging
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "PL", # Pylint -> check if submodules active: Convention (C), Error (E), Refactor (R), Warning (W) -> PLC for convention
    # "DOC", # pydoclint only in preview mode -> not stable
    ]
ignore = [
    "S101", # S101 Use of `assert` detected
    "D415", #  First line should end with a period, question mark, or exclamation point
    "RET504", # Unnecessary assignment to `variable` before `return` statement
]

# Allow fix for all enabled rules (when `--fix` / fix = true) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in selected subdirectories.
[lint.per-file-ignores]
"__init__.py" = ["E402", "D104"]
"**/{tests,docs,tools}/*" = ["E402", "D"]

[lint.pydocstyle]
convention = "google"